name: CI and Build & Deploy

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

jobs:
  import_translations:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug - Check if pt-BR.json exists
        run: |
          FILE_PATH="src/i18n/pt-BR.json"
          echo "Verificando se o arquivo pt-BR.json existe..."
          if [ -f "$FILE_PATH" ]; then
            echo "Arquivo pt-BR.json encontrado."
            ls -l "$FILE_PATH"
          else
            echo "Erro: Arquivo pt-BR.json não encontrado no caminho esperado!"
            ls -R src
            exit 1
          fi

      - name: Import to Tolgee
        env:
          VITE_TOLGEE_API_URL: ${{ secrets.VITE_TOLGEE_API_URL }}
          VITE_TOLGEE_PROJECT_ID: ${{ secrets.VITE_TOLGEE_PROJECT_ID }}
          VITE_TOLGEE_API_KEY: ${{ secrets.VITE_TOLGEE_API_KEY }}
        run: |
          echo "Importando o arquivo pt-BR.json para o Tolgee."
          FILE_PATH="src/i18n/pt-BR.json"

          params=$(jq -c -n '{
            structureDelimiter: ".",
            forceMode: "KEEP",
            overrideKeyDescriptions: true,
            convertPlaceholdersToIcu: true,
            createNewKeys: true,
            fileMappings: [{
              fileName: "pt-BR",
              namespace: "",
              format: "JSON_ICU",
              languageTag: "pt-BR"
            }],
            tagNewKeys: ["imported"],
            removeOtherKeys: false
          }')

          status_code=$(curl -o response.json -s -w "%{http_code}" -X POST \
            "$TOLGEE_URL/v2/projects/$TOLGEE_PROJECT/single-step-import" \
            -H "Content-Type: multipart/form-data" \
            -H "X-API-Key: $TOLGEE_KEY" \
            -F "files=@$FILE_PATH" \
            -F "params=$params")

          if [ "$status_code" -ge 400 ]; then
            echo "Erro na importação. Código de status HTTP: $status_code"
            cat response.json
            exit 1
          else
            echo "Importação bem-sucedida."
            cat response.json
          fi

  ci:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        node: [20]

    steps:
      - name: Checkout 🛎
        uses: actions/checkout@v4

      - name: Setup Node.js 🏗
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          check-latest: true

      - name: Install pnpm 📦
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Run linter
        run: pnpm lint

  build:
    runs-on: ubuntu-latest
    needs: ci
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js 🏗
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm 📦
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Setup build cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            .vite
          key: ${{ runner.os }}-node-cache-${{ hashFiles('**/package-lock.json', '**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node-cache-

      - name: Install dependencies
        run: pnpm install

      - name: Build
        run: pnpm build

      - name: Deploy 🚀
        uses: JamesIves/github-pages-deploy-action@releases/v3
        with:
          ACCESS_TOKEN: ${{ secrets.ACTION_TOKEN }}
          BRANCH: gh-pages
          FOLDER: dist
